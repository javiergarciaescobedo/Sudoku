/*
 * Copyright (C) 2014 Javier García Escobedo <javiergarbedo.es>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package es.javiergarbedo.sudoku;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.util.ResourceBundle;
import javax.swing.JOptionPane;

/**
 *
 * @author Javier García Escobedo <javiergarbedo.es>
 */
public class SudokuPanel extends javax.swing.JPanel {

    private final int CELL_SIZE = 40;
    private final int NUM_COLUMNS = 9;
    private final int NUM_ROWS = 9;
    private final int MARGIN_X_VALUES = 14;
    private final int MARGIN_Y_VALUES = 29;
    private final Color BACKGROUND_SELECTED = Color.ORANGE;
    private final Color BACKGROUND_CLUE = new Color(255, 228, 181);
    private final Color BACKGROUND_NORMAL = new Color(255, 255, 224);
    private int rowSelected = -1;
    private int colSelected = -1;
    private Sudoku sudoku = null;

    /**
     * Creates new form SudokuPanel
     */
    public SudokuPanel() {
        initComponents();
    }

    public void setSudoku(Sudoku sudoku) {
        this.sudoku = sudoku;
    }

    public int getRowSelected() {
        return rowSelected;
    }

    public int getColSelected() {
        return colSelected;
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        if (sudoku != null) {
            //Pintar las rayas horizontales
            for (int i = 0; i <= NUM_ROWS; i++) {
                if (i % 3 == 0) {
                    g.setColor(Color.BLACK);
                } else {
                    g.setColor(Color.LIGHT_GRAY);
                }
                g.drawLine(0, CELL_SIZE * i, CELL_SIZE * NUM_COLUMNS, CELL_SIZE * i);
            }
            //Pintar las rayas verticales
            for (int i = 0; i <= NUM_COLUMNS; i++) {
                if (i % 3 == 0) {
                    g.setColor(Color.BLACK);
                } else {
                    g.setColor(Color.LIGHT_GRAY);
                }
                g.drawLine(CELL_SIZE * i, 0, CELL_SIZE * i, CELL_SIZE * NUM_ROWS);
            }
            //Pintar los valores
            for (int row = 0; row < NUM_ROWS; row++) {
                for (int col = 0; col < NUM_COLUMNS; col++) {
                    //Pintar fondo de las celdas
                    if (row == rowSelected && col == colSelected) {
                        g.setColor(BACKGROUND_SELECTED);
                    } else if (sudoku.isInInitialPuzzle(row, col)) {
                        g.setColor(BACKGROUND_CLUE);
                    } else {
                        g.setColor(BACKGROUND_NORMAL);
                    }
                    g.fillRect(col * CELL_SIZE + 1, row * CELL_SIZE + 1, CELL_SIZE - 1, CELL_SIZE - 1);
                    g.setColor(new Color(75, 0, 130));
                    g.setFont(new Font("SansSerif", Font.BOLD, 24));
                    g.drawString("" + sudoku.getValue(row, col), col * CELL_SIZE + MARGIN_X_VALUES, row * CELL_SIZE + MARGIN_Y_VALUES);
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        rowSelected = evt.getY() / CELL_SIZE;
        colSelected = evt.getX() / CELL_SIZE;
        if (rowSelected >= NUM_ROWS || colSelected >= NUM_COLUMNS) {
            rowSelected = -1;
            colSelected = -1;
        } else if (sudoku.isInInitialPuzzle(rowSelected, colSelected)) {
            rowSelected = -1;
            colSelected = -1;
        }
        repaint();
    }//GEN-LAST:event_formMouseClicked

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        if (getRowSelected() != -1 && getColSelected() != -1) {
            if (evt.getKeyChar() >= '0' && evt.getKeyChar() <= '9') {
                sudoku.setValue(getRowSelected(), getColSelected(), evt.getKeyChar());
                repaint();
                if (sudoku.isFinished()) {
                    ResourceBundle bundle = ResourceBundle.getBundle("es.javiergarbedo.sudoku.lang/strings");
                    String msgLevelCompleted = bundle.getString("level_completed");
                    JOptionPane.showMessageDialog(this, msgLevelCompleted, "Sudoku", JOptionPane.INFORMATION_MESSAGE);
                }
            } else if (evt.getKeyCode() == KeyEvent.VK_BACK_SPACE
                    || evt.getKeyCode() == KeyEvent.VK_DELETE) {
                sudoku.removeValue(getRowSelected(), getColSelected());
                repaint();
            }
        }
    }//GEN-LAST:event_formKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
